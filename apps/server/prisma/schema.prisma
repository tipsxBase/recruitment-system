generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 简历表
model Resume {
  id         Int   @id @default(autoincrement()) /// 主键ID
  filePath  String @db.Text /// 文件存储路径
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  candidate Candidate[]
}

/// 职位表
model Job {
  id  Int @id @default(autoincrement()) /// 主键ID
  name String @db.VarChar(100) @unique  /// 职位名称
  description String? @db.Text /// 职位描述
  status String @db.VarChar(32) /// 职位状态
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  candidate Candidate[]
}

/// 候选人表
model Candidate {
  id         Int      @id @default(autoincrement()) /// 主键 ID
  name       String   /// 姓名
  email      String   /// 邮箱
  phone      String   /// 手机号
  jobId      Int
  job        Job      @relation(fields: [jobId], references: [id])/// 面试职位
  resumeId   Int
  resume     Resume   @relation(fields: [resumeId], references: [id]) /// 简历 ID
  status     String   /// 状态
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  interviewsTickets InterviewsTicket[]
}

/// 面试主表;面试主表，发起面试时会先在这个表中创建一条数据，每个面试官都会创建一个子的面试单
model InterviewsTicket {
  id         Int      @id @default(autoincrement()) /// 主键 ID
  candidateId Int /// 候选人ID
  candidate Candidate @relation(fields: [candidateId], references: [id])
  status String /// 状态
  organizer String /// 发起人发起人
  createdAt  DateTime @default(now()) /// 创建时间
  updatedAt  DateTime @updatedAt /// 更新时间
  interviewsServiceTickets InterviewsServiceTicket[]
}

model InterviewsServiceTicket {
  id         Int      @id @default(autoincrement()) /// 主键 ID
  status String /// 状态
  feedback String @db.Text
  interviewer String /// 面试官
  ticketId Int /// 面试表 ID
  createdAt  DateTime @default(now()) /// 创建时间
  updatedAt  DateTime @updatedAt /// 更新时间
  ticket InterviewsTicket @relation(fields: [ticketId], references: [id])
}

