generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 简历表
model Resume {
  id         Int   @id @default(autoincrement()) /// 主键ID
  filePath  String @db.Text /// 文件存储路径
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  candidate Candidate[]
}

/// 职位表
model Job {
  id  Int @id @default(autoincrement()) /// 主键ID
  name String @db.VarChar(100) @unique  /// 职位名称
  description String? @db.Text /// 职位描述
  status String @db.VarChar(32) /// 职位状态
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  candidate Candidate[]
}

/// 候选人表
model Candidate {
  id         Int      @id @default(autoincrement()) /// 主键 ID
  name       String   /// 姓名
  email      String   /// 邮箱
  phone      String   /// 手机号
  jobId      Int
  job        Job      @relation(fields: [jobId], references: [id])/// 面试职位
  resumeId   Int
  resume     Resume   @relation(fields: [resumeId], references: [id]) /// 简历 ID
  status     String   /// 状态
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  interviewsTickets InterviewsTicket[]
}

/// 面试主表;面试主表，发起面试时会先在这个表中创建一条数据，每个面试官都会创建一个子的面试单
model InterviewsTicket {
  id         Int      @id @default(autoincrement()) /// 主键 ID
  candidateId Int /// 候选人ID
  candidate Candidate @relation(fields: [candidateId], references: [id])
  status String /// 状态
  organizer String /// 发起人发起人
  createdAt  DateTime @default(now()) /// 创建时间
  updatedAt  DateTime @updatedAt /// 更新时间
  interviewsServiceTickets InterviewsServiceTicket[]
}

model InterviewsServiceTicket {
  id         Int      @id @default(autoincrement()) /// 主键 ID
  status String /// 状态
  feedback String @db.Text
  interviewer String /// 面试官
  ticketId Int /// 面试表 ID
  createdAt  DateTime @default(now()) /// 创建时间
  updatedAt  DateTime @updatedAt /// 更新时间
  ticket InterviewsTicket @relation(fields: [ticketId], references: [id])
}



// 定义用户状态的枚举
enum UserStatus {
  ACTIVE    // 用户已激活
  INACTIVE  // 用户未激活
  BANNED    // 用户已封禁
  PENDING   // 用户待激活（例如，等待邮箱验证）
}

// User 模型
model User {
  id           Int         @id @default(autoincrement())  // 用户唯一标识
  email        String      @unique                       // 用户邮箱，唯一
  password     String      // 加密后的密码
  username     String      @unique// 用户名
  status       UserStatus  @default(ACTIVE)              // 用户状态（默认值为 ACTIVE）
  createdAt    DateTime    @default(now())              // 创建时间
  updatedAt    DateTime    @updatedAt                   // 更新时间
  // 角色与权限关系
  roles        UserRole[]
}



model UserRole {
  userId  Int
  roleId  Int
  user    User  @relation(fields: [userId], references: [id])
  role    Role  @relation(fields: [roleId], references: [id])

  @@id([userId, roleId]) // 联合主键
}

model Menu {
  id        Int      @id @default(autoincrement())
  key       String   @unique // 菜单的唯一标识
  path      String   @unique // 菜单的路径
  name      String   // 菜单名称
  parentId  Int?     // 上级菜单ID
  parent    Menu?    @relation("MenuParent", fields: [parentId], references: [id])
  children  Menu[]   @relation("MenuParent") // 子菜单的关系
  buttons   Button[] // 菜单下的按钮信息
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  RoleMenu RoleMenu[]
}

model Button {
  id        Int      @id @default(autoincrement())
  name      String   // 按钮名称
  action    String   // 按钮对应的操作
  menuId    Int      // 所属菜单ID
  menu      Menu     @relation(fields: [menuId], references: [id]) // 与菜单的关系

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RoleButton RoleButton[]
}


model Role {
  id        Int      @id @default(autoincrement())
  name      String   // 角色名称
  menus     RoleMenu[] 
  buttons   RoleButton[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserRole UserRole[]
}


model RoleMenu {
  roleId   Int
  menuId   Int
  role     Role   @relation(fields: [roleId], references: [id])
  menu     Menu   @relation(fields: [menuId], references: [id])

  @@id([roleId, menuId]) // 联合主键
}

model RoleButton {
  roleId   Int
  buttonId Int
  role     Role   @relation(fields: [roleId], references: [id])
  button   Button @relation(fields: [buttonId], references: [id])

  @@id([roleId, buttonId]) // 联合主键
}


